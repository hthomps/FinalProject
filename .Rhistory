ldha_b$ldha,
pch="\U2013", cex=3, col="red")
axis(side=1, at=1:12, labels=ldha_b$line_treat)
for(i in 1:nrow(ldha_b)){segments(i, ldha_b[i,]$ldha+ldha_b[i,]$ldha_sem,
i, ldha_b[i,]$ldha-ldha_b[i,]$ldha_sem)}
#ldha_D
ldha_d<-subset(dat.line, grepl("^D", dat.line$line_treat))
ldha_d$line_treat<-factor(ldha_d$line_treat, levels=ldha_orderd)
ldha_d<-ldha_d[order(ldha_d$line_treat),]
dat_d<-subset(dat, grepl("^D", dat$line_treat))
dat_d$line_treat<-factor(dat_d$line_treat, levels=ldha_orderd)
plot(rep(1:length(unique(dat_d$line_treat)), table(dat_d$line_treat)),
dat_d$ldha_norm[order(dat_d$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of ldha", xlab="Group")
points(1:length(unique(dat_d$line_treat)),
ldha_d$ldha,
pch="\U2013", cex=3, col="red")
axis(side=1, at=1:length(unique(dat_d$line_treat)), labels=ldha_d$line_treat)
for(i in 1:nrow(ldha_d)){segments(i, ldha_d[i,]$ldha+ldha_d[i,]$ldha_sem,
i, ldha_d[i,]$ldha-ldha_d[i,]$ldha_sem)}
#ldha_L
ldha_l<-subset(dat.line, grepl("^L", dat.line$line_treat))
ldha_l$line_treat<-factor(ldha_l$line_treat, levels=ldha_orderl)
ldha_l<-ldha_l[order(ldha_l$line_treat),]
dat_l<-subset(dat, grepl("^L", dat$line_treat))
dat_l$line_treat<-factor(dat_l$line_treat, levels=ldha_orderl)
plot(rep(1:length(unique(dat_l$line_treat)), table(dat_l$line_treat)),
dat_l$ldha_norm[order(dat_l$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of ldha", xlab="Group")
points(1:length(unique(dat_l$line_treat)),
ldha_l$ldha,
pch="\U2013", cex=3, col="red")
axis(side=1, at=1:length(unique(dat_l$line_treat)), labels=ldha_l$line_treat)
for(i in 1:nrow(ldha_l)){segments(i, ldha_l[i,]$ldha+ldha_l[i,]$ldha_sem,
i, ldha_l[i,]$ldha-ldha_l[i,]$ldha_sem)}
#ldha_r
ldha_r<-subset(dat.line, grepl("^R", dat.line$line_treat))
ldha_r$line_treat<-factor(ldha_r$line_treat, levels=ldha_orderr)
ldha_r<-ldha_r[order(ldha_r$line_treat),]
dat_r<-subset(dat, grepl("^R", dat$line_treat))
dat_r$line_treat<-factor(dat_r$line_treat, levels=ldha_orderr)
plot(rep(1:length(unique(dat_r$line_treat)), table(dat_r$line_treat)),
dat_r$ldha_norm[order(dat_r$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of ldha", xlab="Group")
points(1:length(unique(dat_r$line_treat)),
ldha_r$ldha,
pch="\U2013", cex=3, col="red")
axis(side=1, at=1:length(unique(dat_r$line_treat)), labels=ldha_r$line_treat)
for(i in 1:nrow(ldha_r)){segments(i, ldha_r[i,]$ldha+ldha_r[i,]$ldha_sem,
i, ldha_r[i,]$ldha-ldha_r[i,]$ldha_sem)}
plot(rep(1:length(unique(dat_b$line_treat)), table(dat_b$line_treat)),
dat_b$heme15_norm[order(dat_b$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$heme15+dat.line$heme15_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of Hb15", xlab="Group", axes=F)
points(1:length(unique(dat_b$line_treat)),
heme15_b$heme15,
pch="\U2013", cex=3, col="red")
axis(side=1, at=1:12, labels=heme15_b$line_treat)
plot(rep(1:length(unique(dat_b$line_treat)), table(dat_b$line_treat)),
log2(dat_b$heme15_norm[order(dat_b$line_treat)]), pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$heme15+dat.line$heme15_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of Hb15", xlab="Group", axes=F)
axis(side=2)
log2(dat_b$heme15_norm
)
dat_b$heme15_norm
plot(rep(1:length(unique(dat_b$line_treat)), table(dat_b$line_treat)),
log2(dat_b$heme15_norm[order(dat_b$line_treat)]), pch=21, bg="blue",
xaxt="n", ylab="Normalized expression of Hb15", xlab="Group")
plot(rep(1:length(unique(dat_b$line_treat)), table(dat_b$line_treat)),
log2(dat_b$heme15_norm[order(dat_b$line_treat)]), pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$heme15+dat.line$heme15_sem, na.rm=T)),
xaxt="n", ylab="Normalized expression of Hb15", xlab="Group", log="y")
plot(rep(1:length(unique(dat_r$line_treat)), table(dat_r$line_treat)),
dat_r$ldha_norm[order(dat_r$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of ldha", xlab="Group")
points(1:length(unique(dat_r$line_treat)),
ldha_r$ldha,
pch="\U2013", cex=3, col="red")
axis(side=1, at=1:length(unique(dat_r$line_treat)), labels=ldha_r$line_treat)
plot(rep(1:length(unique(dat_r$line_treat)), table(dat_r$line_treat)),
dat_r$ldha_norm[order(dat_r$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of ldha", xlab="Group", log2="y")
plot(rep(1:length(unique(dat_r$line_treat)), table(dat_r$line_treat)),
dat_r$ldha_norm[order(dat_r$line_treat)], pch=21, bg="blue",
ylim=c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)), xaxt="n", ylab="Normalized expression of ldha", xlab="Group", axes=F)
axis(side=2, at=log2(c(0,1.05*max(dat.line$ldha+dat.line$ldha_sem, na.rm=T)))
)
# Chunk 1
library(dplyr)
library(tidyverse)
library(seqinr)
load("MeltedData.RData")
# Chunk 2
#code used to load original file
# msex.prot<-read.fasta("ms_ogs_proteins.fasta", seqtype = "AA", as.string = TRUE, set.attributes = FALSE)
#save file as RData to load file faster in the future
# save(msex.prot, file="msex_prot.RData")
# protein=names(msex.prot) #extract protein ID from list
# msex.prot<-unname(msex.prot) #unname list
# length(msex.prot) #27403 entries
# length(protein) #27403 entries
# seq<-unlist(msex.prot);rm(msex.prot)
#
# msex.prot<-data.frame(protein, seq); rm(protein, seq)
# msex.prot$seq<-as.character(msex.prot$seq)
# str(msex.prot)
#
# #save file as RData to load file faster in the future
# save(msex.prot, file="msex_prot.RData")
#Load data
load("msex_prot.RData")
head(msex.prot)
View(fatdat2)
View(fatdat)
View(subdat)
View(fatdat2)
View(headdat2)
# load in transcriptome data
dat <- read.csv("MothData.csv")
# we need to melt the dataset to each row a unique gene - transcriptome combination
# we'll use the melt function in the reshape2 package
dat2 <- dat %>% melt(id.vars = c("gene_id", "gene_description"),
measure.vars = c("H.L2.D1", "H.L3.D1", "H.L4.12h", "H.L4.Late",
"H.L5.12hS", "H.L5.D2S", "H.L5.preWS", "H.P.Late",
"H.A.D1", "H.A.D3", "H.A.D7", "F.L4.Late", "F.L5.D1",
"F.L5.preW", "F.L5.W", "F.P.D13S", "F.P.D1518", "F.A.D13",
"F.A.D79", "W.E.3hS", "W.E.LateS", "W.L1.D1S", "W.L2.D1S",
"W.L3.D1S", "G.L2.unk", "G.L3.LateS", "G.L4.0h", "G.L4.12hS", "G.L4.LateS",
"G.L5.13hS", "G.L5.D1S", "G.L5.preWS", "G.L5.WS", "G.L5.W",
"G.P.D1", "G.P.D1518", "G.A.D35", "MT.L5.preW", "MT.A.D1",
"MT.A.D3", "M.L4.Late", "M.L5.12h", "M.L5.12hS", "M.L5.preW",
"M.L5.preWS","M.L5.W", "M.L5.WS",  "T.P.D3",  "T.P.D1518",
"T.A.D13", "O.P.D1518", "O.A.D1", "H.A.D1F1S", "H.A.D1F2S",
"H.A.D1F3S", "H.A.D1F4S", "H.A.D1M1S", "H.A.D1M2S", "H.A.D1M3S",
"H.A.D1M4S", "An.L5.1S", "An.L5.2S", "An.L5.3S", "An.A.F1S", "An.A.F2S",  "An.A.F3S", "An.A.MS"))
# load packages
library(tidyverse)
library(reshape2)
# we need to melt the dataset to each row a unique gene - transcriptome combination
# we'll use the melt function in the reshape2 package
dat2 <- dat %>% melt(id.vars = c("gene_id", "gene_description"),
measure.vars = c("H.L2.D1", "H.L3.D1", "H.L4.12h", "H.L4.Late",
"H.L5.12hS", "H.L5.D2S", "H.L5.preWS", "H.P.Late",
"H.A.D1", "H.A.D3", "H.A.D7", "F.L4.Late", "F.L5.D1",
"F.L5.preW", "F.L5.W", "F.P.D13S", "F.P.D1518", "F.A.D13",
"F.A.D79", "W.E.3hS", "W.E.LateS", "W.L1.D1S", "W.L2.D1S",
"W.L3.D1S", "G.L2.unk", "G.L3.LateS", "G.L4.0h", "G.L4.12hS", "G.L4.LateS",
"G.L5.13hS", "G.L5.D1S", "G.L5.preWS", "G.L5.WS", "G.L5.W",
"G.P.D1", "G.P.D1518", "G.A.D35", "MT.L5.preW", "MT.A.D1",
"MT.A.D3", "M.L4.Late", "M.L5.12h", "M.L5.12hS", "M.L5.preW",
"M.L5.preWS","M.L5.W", "M.L5.WS",  "T.P.D3",  "T.P.D1518",
"T.A.D13", "O.P.D1518", "O.A.D1", "H.A.D1F1S", "H.A.D1F2S",
"H.A.D1F3S", "H.A.D1F4S", "H.A.D1M1S", "H.A.D1M2S", "H.A.D1M3S",
"H.A.D1M4S", "An.L5.1S", "An.L5.2S", "An.L5.3S", "An.A.F1S", "An.A.F2S",  "An.A.F3S", "An.A.MS"))
# let's rename the "variable" and "value" columns to something more informative
colnames(dat2)[3] <- "transcriptome"
# load in transcriptome data
dat <- read.csv("MothData.csv")
str(dat)
# load in transcriptome data
dat <- read.csv("MothData.csv", header=T)
str(dat)
colnames(dat)[1]<-"gene_id"
str(dat)
id.vars
# we need to melt the dataset to each row a unique gene - transcriptome combination
# we'll use the melt function in the reshape2 package
dat2 <- dat %>% melt(id.vars = c("gene_id", "gene_description"),
measure.vars = c("H.L2.D1", "H.L3.D1", "H.L4.12h", "H.L4.Late",
"H.L5.12hS", "H.L5.D2S", "H.L5.preWS", "H.P.Late",
"H.A.D1", "H.A.D3", "H.A.D7", "F.L4.Late", "F.L5.D1",
"F.L5.preW", "F.L5.W", "F.P.D13S", "F.P.D1518", "F.A.D13",
"F.A.D79", "W.E.3hS", "W.E.LateS", "W.L1.D1S", "W.L2.D1S",
"W.L3.D1S", "G.L2.unk", "G.L3.LateS", "G.L4.0h", "G.L4.12hS", "G.L4.LateS",
"G.L5.13hS", "G.L5.D1S", "G.L5.preWS", "G.L5.WS", "G.L5.W",
"G.P.D1", "G.P.D1518", "G.A.D35", "MT.L5.preW", "MT.A.D1",
"MT.A.D3", "M.L4.Late", "M.L5.12h", "M.L5.12hS", "M.L5.preW",
"M.L5.preWS","M.L5.W", "M.L5.WS",  "T.P.D3",  "T.P.D1518",
"T.A.D13", "O.P.D1518", "O.A.D1", "H.A.D1F1S", "H.A.D1F2S",
"H.A.D1F3S", "H.A.D1F4S", "H.A.D1M1S", "H.A.D1M2S", "H.A.D1M3S",
"H.A.D1M4S", "An.L5.1S", "An.L5.2S", "An.L5.3S", "An.A.F1S", "An.A.F2S",  "An.A.F3S", "An.A.MS"))
# let's rename the "variable" and "value" columns to something more informative
colnames(dat2)[3] <- "transcriptome"
colnames(dat2)[4] <- "copynumber"
# let's pull apart the transcriptome names into the tissue type (which is the code before
# the first . ), life stage (the code between .'s), and whatever is on the end
# we use the separate command in dplyr
dat2 <- dat2 %>% separate(transcriptome, into = c("tissue", "life_stage", "note"),
remove = FALSE, extra = "drop")
# let's just grab the data for the life stages (adult and 5th instar larva)
# and tissue types (fatbody, head, and midgut) that we want
subdat <- dat2 %>% filter(life_stage == "L5" | life_stage == "A") %>% filter(tissue == "H" | tissue == "G" | tissue == "F")
# change them to factors for easier graphing later on
subdat$life_stage <- as.factor(subdat$life_stage)
subdat$tissue <- as.factor(subdat$tissue)
# now lets make separate dataesets for each tissue type, and get the mean expression
# level for each lifestage
headdat <- subdat %>% filter(tissue == "H") %>% group_by(gene_id, life_stage) %>% summarise(mean = round(mean(copynumber), digits = 3))
gutdat <- subdat %>% filter(tissue == "G") %>% group_by(gene_id, life_stage) %>% summarise(mean = round(mean(copynumber), digits = 3))
fatdat <- subdat %>% filter(tissue == "F") %>% group_by(gene_id, life_stage) %>% summarise(mean = round(mean(copynumber), digits = 3))
# now we cast it back out so there is a column for adult (A) and a column for larva (L5)
# and then take the difference between those two columns
headdat2 <- headdat %>% dcast(gene_id ~ life_stage, mean) %>% mutate(diff = abs(A - L5)) %>% arrange(desc(diff))
gutdat2 <- gutdat %>% dcast(gene_id ~ life_stage, mean) %>% mutate(diff = abs(A - L5)) %>% arrange(desc(diff))
fatdat2 <- fatdat %>% dcast(gene_id ~ life_stage, mean) %>% mutate(diff = abs(A - L5)) %>% arrange(desc(diff))
# the fatbody genes with the greatest difference between adult and L5 are:
View(fatdat2)
rm(msex.prot)
save.image("~/GitHub/FinalProject/MeltedData.RData")
#Load data
load("msex_prot.RData")
load("MeltedData.RData") #load wrangled data
head(headdat2)
head(fatdat2)
head(gutdat2)
goi<- c(headdat2$gene_id[1:3], gutdat2$gene_id[1:3], fatdat2$gene_id[1:3])
goi
str(headdat2)
headdat2$gene_id<- as.character(headdat2$gene_id)
str(headdat2)
fatdat2$gene_id<- as.character(fatdat2$gene_id)
gutdat2$gene_id<- as.character(gutdat2$gene_id)
goi<- c(headdat2$gene_id[1:3], gutdat2$gene_id[1:3], fatdat2$gene_id[1:3])
goi
goi<-unique(goi)
goi
msex.prot[1,]
msex.prot[grepl("*\\goi", msex.prot$protein),]
head(msex.prot$protein)
msex.prot$protein<-gsub("-(\\w)", "", msex.prot$protein)
head(msex.prot$protein)
#Load data
load("msex_prot.RData")
msex.prot$protein<-gsub("-(\\w)$", "", msex.prot$protein)
head(msex.prot$protein)
msex.prot$protein<-gsub("-(\\w)$", "", msex.prot$protein)
head(msex.prot$protein)
msex.prot$protein<-gsub("-(\\w+)$", "", msex.prot$protein)
head(msex.prot$protein)
msex.prot.goi<-msex.prot[msex.prot$protein==goi,]
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
msex.prot.goi
for(i in length(goi)){
msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i]]
}
for(i in length(goi)){
msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]
}
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}else
if(nrow(msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],])>1){
msex.prot.goi<-cbind(msex.prot.goi,c(NA, NA))
msex.prot.goi[c(i,length(msex.prot.goi)),]<-msex.prot[msex.prot$protein==goi[i],]
}
}
msex.prot.goi
msex.prot[msex.prot$protein==goi[1],]
2
msex.prot[msex.prot$protein==goi[2],]
msex.prot[msex.prot$protein==goi[3],]
msex.prot[msex.prot$protein==goi[4],]
msex.prot[msex.prot$protein==goi[5],]
goi #five unique genes
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}else
if(nrow(msex.prot[msex.prot$protein==goi[i],])>1){
msex.prot.goi<-cbind(msex.prot.goi,c(NA, NA))
msex.prot.goi[c(i,length(msex.prot.goi)),]<-msex.prot[msex.prot$protein==goi[i],]
}
}
msex.prot.goi
goi #six unique genes
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}else
if(nrow(msex.prot[msex.prot$protein==goi[i],])>1){
msex.prot.goi<-cbind(msex.prot.goi,c(NA, NA))
msex.prot.goi[c(i,nrow(msex.prot.goi)),]<-msex.prot[msex.prot$protein==goi[i],]
}
}
msex.prot
msex.prot[,1]
msex.prot.goi[,1]
i=6
c(i,nrow(msex.prot.goi))
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}
}
msex.prot.goi
i=1
msex.prot[msex.prot$protein==goi[i],])
msex.prot[msex.prot$protein==goi[i],]
i=2
msex.prot[msex.prot$protein==goi[i],]
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}
msex.prot.goi
i=6
msex.prot[msex.prot$protein==goi[i],]
i=5
msex.prot[msex.prot$protein==goi[i],]
msex.prot[msex.prot$protein==goi[i],][1]
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in 1:length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}else
if(nrow(msex.prot[msex.prot$protein==goi[i],])>1){
for(j in 1:(nrow(msex.prot[msex.prot$protein==goi[i],])-1)){
msex.prot.goi<-cbind(msex.prot.goi,c(NA, NA))
x<-msex.prot[msex.prot$protein==goi[i],]
msex.prot.goi[nrow(msex.prot.goi),]<-x[j,]}
}
}
msex.prot.goi
msex.prot.goi[,1]
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
msex.prot.goi<-cbind(msex.prot.goi,c(NA, NA))
msex.prot.goi
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in 1:length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}else
if(nrow(msex.prot[msex.prot$protein==goi[i],])>1){
for(j in 1:(nrow(msex.prot[msex.prot$protein==goi[i],])-1)){
msex.prot.goi<-rbind(msex.prot.goi,c(NA, NA))
x<-msex.prot[msex.prot$protein==goi[i],]
msex.prot.goi[nrow(msex.prot.goi),]<-x[j,]}
}
}
msex.prot.goi[,1]
i=1
nrow(msex.prot[msex.prot$protein==goi[i],])
msex.prot[msex.prot$protein==goi[i],]
msex.prot.goi<-data.frame(protein=rep(NA, length(goi)), seq=rep(NA, length(goi)))
for(i in 1:length(goi)){
if(nrow(msex.prot[msex.prot$protein==goi[i],])==1){msex.prot.goi[i,]<-msex.prot[msex.prot$protein==goi[i],]}else
if(nrow(msex.prot[msex.prot$protein==goi[i],])>1){
x<-msex.prot[msex.prot$protein==goi[i],]
msex.prot.goi[i,]<-x[1,]
for(j in 1:(nrow(msex.prot[msex.prot$protein==goi[i],])-1)){
msex.prot.goi<-rbind(msex.prot.goi,c(NA, NA))
msex.prot.goi[nrow(msex.prot.goi),]<-x[j+1,]}
}
}
msex.prot.goi[,1]
write.fasta(sequences=msex.prot.goi$seq, names=msex.prot.goi$protein, file.out = "msex_goi.fasta")
goi<-as.list(msex.prot.goi$seq)
goi
names(goi)<-msex.prot.goi$protein
goi
goi<-strsplit(goi, "\\w")
goi<-strsplit(goi)
goi<-strsplit(goi, split="")
goi<-as.list(strsplit(msex.prot.goi$seq)
)
goi<-as.list(strsplit(msex.prot.goi$seq, ""))
goi
names(goi)<-msex.prot.goi$protein
goi
write.fasta(sequences=goi, names=names(goi), file.out = "msex_goi.fasta")
arrange(msex.prot.goi, protein)
msex.prot.goi<-arrange(msex.prot.goi, protein)
msex.prot.goi[,1]
#convert data frame into list of single alphabets for export
goi<-as.list(strsplit(msex.prot.goi$seq, ""))
names(goi)<-msex.prot.goi$protein
#export into FASTA
write.fasta(sequences=goi, names=names(goi), file.out = "msex_goi.fasta")
library(BiocManager)
install(c("sangerseqR","annotate"))
?blastSequences
??blastSequences
install("Biostrings")
library(Biostrings)
seq<-readAAStringSet("ms_ogs_proteins.fasta")
head(seq)
str(seq)
seq[1,]
seq[1,"name"]
seq[1,"names"]
seq[1,3]
seq$names
str(seq)
seq[[1]]
seq[[1]]$names
seq$names[[1]]
names(seq)<-gsub("-(\\w+)$", "", names(seq))
seq$names
names(seq)
seq<-readAAStringSet("ms_ogs_proteins.fasta")
names(seq)[1]
names(seq)<-gsub("(Msex2.)(\\d)(.)", "(Msex2.)(\\d)", names(seq))
names(seq)[1]
seq<-readAAStringSet("ms_ogs_proteins.fasta")
names(seq)[1]
names(seq)[1]
names(seq)<-gsub("(Msex2.)(\\d).+", "(Msex2.)(\\d)", names(seq))
names(seq)[1]
seq<-readAAStringSet("ms_ogs_proteins.fasta")
names(seq)<-gsub("(Msex2.)(\\d).+", "\\1\\2", names(seq))
names(seq)[1]
seq<-readAAStringSet("ms_ogs_proteins.fasta")
names(seq)[1]
names(seq)<-gsub("(Msex2.)(\\d+).+", "\\1\\2", names(seq))
names(seq)[1]
load("MeltedData.RData") #load wrangled data
headdat2$gene_id<- as.character(headdat2$gene_id)
fatdat2$gene_id<- as.character(fatdat2$gene_id)
gutdat2$gene_id<- as.character(gutdat2$gene_id)
goi<- c(headdat2$gene_id[1:3], gutdat2$gene_id[1:3], fatdat2$gene_id[1:3])
goi<-unique(goi)
goi #six unique genes
goi<-data.frame(goi=goi) #six unique genes
msex.prot<-readAAStringSet("ms_ogs_proteins.fasta")
names(msex.prot)<-gsub("(Msex2.)(\\d+).+", "\\1\\2", names(msex.prot))
msex.prot.goi<-msex.prot$goi
msex.prot.goi
msex.prot.goi<-msex.prot[goi$goi]
msex.prot.goi
names$msex.prot.goi
names(msex.prot.goi)
goi
?blast
libray(rblast)
library(rblast)
library(mhahsler/rBLAST)
library(devtools)
install.packages("devtools")
install_github("mhahsler/rBLAST")
library(devtools)
install_github("mhahsler/rBLAST")
install.packages("Rtools")
library(rBLAST)
?blast
Sys.which("blastn")
setwd("D:/user/Documents/NCBI_BLAST")
db.p<-blast(db="insecta_prot")
db.p
goi1<-predict(db.p, msex.prot.goi[1])
db.p<-blast(db="insecta_prot", type="blastp")
db.p
goi1<-predict(db.p, msex.prot.goi[1])
goi[1:5,]
goi1[1:5,]
library(dplyr)
library(tidyverse)
library(seqinr)
library(BiocManager)
library(Biostrings)
library(rBLAST)
load("MeltedData.RData") #load wrangled data
library(dplyr)
library(tidyverse)
library(seqinr)
library(BiocManager)
library(Biostrings)
library(rBLAST)
load("MeltedData.RData") #load wrangled data
msex.prot<-readAAStringSet("ms_ogs_proteins.fasta")
names(msex.prot)<-gsub("(Msex2.)(\\d+).+", "\\1\\2", names(msex.prot)) #remove additional comments after gene ID
headdat2$gene_id<- as.character(headdat2$gene_id)
fatdat2$gene_id<- as.character(fatdat2$gene_id)
gutdat2$gene_id<- as.character(gutdat2$gene_id)
goi<- c(headdat2$gene_id[1:3], gutdat2$gene_id[1:3], fatdat2$gene_id[1:3])
goi<-unique(goi)
goi<-data.frame(goi=goi) #six unique genes
msex.prot.goi<-msex.prot[goi$goi]
msex.prot.goi<-msex.prot[goi$goi]
msex.prot.goi
setwd("D:/user/Documents/NCBI_BLAST")
db.p<-blast(db="insecta_prot", type="blastp")
db.p
goi1.p<-predict(db.p, msex.prot.goi[1])
goi1.p[1:5,]
goi2.p<-predict(db.p, msex.prot.goi[2])
goi2.p[1:5,]
goi3.p<-predict(db.p, msex.prot.goi[3])
goi3.p[1:5,]
goi4.p<-predict(db.p, msex.prot.goi[4])
goi4.p[1:5,]
goi5.p<-predict(db.p, msex.prot.goi[5])
goi5.p[1:5,]
goi6.p<-predict(db.p, msex.prot.goi[6])
goi6.p[1:5,]
makeblastdb("insecta_nt.fasta", type="nucl") #create blast database of insecta nucleotides
makeblastdb("insecta_nt.fasta", dbtype="nucl") #create blast database of insecta nucleotides
db.nt<-blast(db="insecta_nt", type="blastx")
db.nt<-blast(db="insecta_nt", type="blastx")
blast
db.nt<-blast(db="insecta_nt", type="blast")
db.nt<-blast(db="insecta_nt", type="blastN")
db.nt<-blast(db="insecta_prot", type="blastN")
setwd("D:/user/Documents/NCBI_BLAST")
db.p<-blast(db="insecta_prot", type="blastp")
save.image("~/GitHub/FinalProject/msex_goi.RData")
load("msex_goi.RData")
goi3.n[1:5,]
goi3.p[1:5,]
goi.n<-rbind(goi1.n[1:5,], goi2.n[1:5,], goi3.n[1:5,], goi4.n[1:5,], goi5.n[1:5,], goi6.n[1:5,])
go.n<-goi.n[complete.cases(goi.n),]
goi.n<-goi.n[complete.cases(goi.n),]
rm(go.n)
goi.n
rm(goi_result)
goi.p
goi.p<-rbind(goi1.p[1:5,], goi2.p[1:5,], goi3.p[1:5,], goi4.p[1:5,], goi5.p[1:5,], goi6.p[1:5,])
goi.p$SubjectID<-as.character(goi.p$SubjectID)
goi.p<-goi.p[complete.cases(goi.p),]
goi.p
goi.p[25,]
goi.p[25,2]
save.image("msex_goi.RData")
getwd()
